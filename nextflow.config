/*
 * Default configuration for in-silico vaccine design pipeline
 */

// DAG configuration
dag {
    enabled = true
    overwrite = true
    file = 'pipeline_dag.dag'
}

// Global parameters
params {
    // Include external parameters file
    includeConfig 'params.config'
    
    // Preset options
    help           = false
    outdir         = "results"
    publish_dir_mode = 'copy'
    
    // Container settings - only used when enabled
    container_registry = 'dockerhub'
    
    // Max resource limits - customize for your environment
    max_memory     = '64.GB'
    max_cpus       = 16
    max_time       = '48.h'
}

// Container configurations
process {
    // Default container
    container = 'username/vaccine-design-base:latest'
    
    withName: 'predictBCellEpitopes|predictTCellEpitopesI|predictTCellEpitopesII' {
        // Enhanced error handling for epitope prediction processes
        errorStrategy = 'retry'
        maxRetries = 3
    }
    
    withName: 'retrieveSequence' {
        container = 'username/vaccine-design-base:latest'
        
        // Enhanced error handling for sequence retrieval
        errorStrategy = 'retry'
        maxRetries = 3
    }
    
    withName: 'predict.*' {
        container = 'username/vaccine-design-epitope:latest'
    }
    
    withName: 'molecularDynamics' {
        container = 'username/vaccine-design-dynamics:latest'
    }
}

// Executor settings
executor {
    $local {
        cpus = 4
        memory = '8 GB'
    }
}

// Process-specific resource configurations
process {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
    
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'
    
    withName: 'molecularDynamics' {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }
}

// Profiles for different execution environments
profiles {
    standard {
        process.executor = 'local'
    }
    
    local {
        includeConfig 'configs/local.config'
    }
    
    docker {
        docker.enabled = true
        docker.userEmulation = true
        singularity.enabled = false
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
    }
    
    slurm {
        includeConfig 'configs/slurm.config'
    }
    
    test {
        params.accession = 'test'
        params.run_md = false
    }
}

// Manifest for pipeline metadata
manifest {
    name            = 'in-silico-vaccine-design'
    author          = 'Your Name'
    homePage        = 'https://github.com/username/in-silico-vaccine-design'
    description     = 'Nextflow pipeline for automated in silico vaccine design'
    mainScript      = 'main.nf'
    nextflowVersion = '>=21.10.0'
    version         = '1.0.0'
}

// Function to check max resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}