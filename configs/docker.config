/*
 * Configuration for local execution on a laptop
 */

// Default process settings for low resource environment
process {
    // Default settings suitable for laptop execution
    executor = 'local'
    cpus = 2
    memory = 4.GB
    
    // Process-specific settings
    withName: 'retrieveSequence' {
        cpus = 1
        memory = 2.GB
    }
    
    withName: 'predict.*' {
        cpus = 1
        memory = 2.GB
    }
    
    withName: 'combine.*|design.*' {
        cpus = 1
        memory = 2.GB
    }
    
    withName: 'evaluate.*' {
        cpus = 2
        memory = 3.GB
    }
    
    withName: 'molecularDynamics' {
        cpus = 2
        memory = 4.GB
    }
}

// Set maximum resources appropriate for a laptop
params.max_memory = 8.GB
params.max_cpus = 4
params.max_time = 1.h

// Error handling strategy
process.errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
process.maxRetries = 1

// Docker settings (optional - only if Docker is installed)
docker {
    enabled = false  // Set to true if Docker is installed
    userEmulation = true
}

// Function to check max resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}